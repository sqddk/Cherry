subprojects {

    apply plugin: 'java'

    group 'cn.cherry'
    version '1.0'

    task sourcesJar(type: Jar) {
        from sourceSets.main.allJava
        archiveClassifier.set("sources")
    }

    tasks.withType(JavaCompile).tap {
        configureEach {
            options.encoding = "UTF-8"
        }
    }

    artifacts {
        archives sourcesJar
    }

    repositories {
        mavenCentral()
        maven{ url 'https://maven.aliyun.com/nexus/content/groups/public'}
        maven{ url 'https://maven.aliyun.com/nexus/content/repositories/jcenter'}
        maven{ url 'https://repo1.maven.org/maven2/'}
    }

    dependencies {
        testImplementation 'org.junit.jupiter:junit-jupiter-api:5.9.0'
        testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.9.0'
        implementation (
                'io.netty:netty-all:4.1.86.Final',
                'com.alibaba.fastjson2:fastjson2:2.0.18',
                'org.apache.logging.log4j:log4j-api:2.19.0',
                'org.apache.logging.log4j:log4j-core:2.19.0'
        )
    }

    test {
        useJUnitPlatform()
    }

}

project('Cherry-Server') {
    jar {
        duplicatesStrategy = DuplicatesStrategy.EXCLUDE
        manifest {
            attributes 'Main-Class': 'cn.cherry.server.Application'
        }
        from {
            (configurations.runtimeClasspath).collect {
                it.isDirectory() ? it : zipTree(it)
            }
        }
        from sourceSets.main.allJava
    }
    dependencies {
        implementation project(":Cherry-Core")
    }
}

project('Cherry-Client') {
    jar {
        duplicatesStrategy = DuplicatesStrategy.EXCLUDE
        from {
            (configurations.runtimeClasspath).collect {
                it.isDirectory() ? it : zipTree(it)
            }
        }
        from sourceSets.main.allJava
    }
    dependencies {
        implementation project(":Cherry-Core")
    }
}

project('Cherry-Core') {
    jar {
        duplicatesStrategy = DuplicatesStrategy.EXCLUDE
        from {
            (configurations.runtimeClasspath).collect {
                it.isDirectory() ? it : zipTree(it)
            }
        }
        from sourceSets.main.allJava
    }
}